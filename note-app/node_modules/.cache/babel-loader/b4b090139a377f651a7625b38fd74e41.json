{"ast":null,"code":"var _jsxFileName = \"/Users/haeunpark/Desktop/2022_06_Spring_16credit/CSE316/assignments316/assignment2/note-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from \"react\";\nimport { useState } from \"react\";\nimport Left from \"./components/Left\";\nimport Right from \"./components/Right\";\nimport Modal from \"./components/Modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [notes, setNotes] = useState([{\n    textTitle: \"CSE 316\",\n    date: \"3/15/2022, 14:42:36 PM\",\n    text: \"CSE 316\",\n    tags: []\n  }, {\n    textTitle: \"Another wrapping line example! This is another text\",\n    date: \"3/15/2022, 14:42:30 PM\",\n    text: \"Another wrapping line example! This is another text\",\n    tags: []\n  }]);\n  const [seletedId, setSeletedId] = useState(-1);\n  const [windowWidth, setWindowWidth] = useState(0);\n  const [visibleSidebar, setVisibleSidebar] = useState(false);\n  const layoutRef = useRef(null); //addNewNote\n\n  const addNewNote = text => {\n    const newNote = {\n      textTitle: \"New Note\",\n      date: getTimeAndDate(),\n      text: \"\",\n      tags: []\n    };\n    const newNoteList = [newNote, ...notes];\n    setNotes(newNoteList);\n    setSeletedId(0);\n    console.log(newNoteList);\n    const orderedDate = date.sort((a, b) => new Date(a.date) - new Date(b.date));\n    console.log(\"orderedDate:\", orderedDate);\n  }; //getTimeAndDate\n\n\n  const getTimeAndDate = () => {\n    let today = new Date();\n    let year = today.getFullYear().toString();\n    let month = (today.getMonth() + 1).toString();\n    let date = today.getDate().toString();\n    let hours = today.getHours().toString() % 12 || 12;\n    let minutes = today.getMinutes().toString();\n    let seconds = today.getSeconds().toString();\n    let ampm = hours < 12 ? \"PM\" : \"AM\";\n    return month + \"/\" + date + \"/\" + year + \", \" + hours + \":\" + minutes + \":\" + seconds + \" \" + ampm;\n  }; //deleteNote\n\n\n  const deleteNote = () => {\n    if (seletedId === notes.length - 1) {\n      setSeletedId(notes.length - 2);\n    }\n\n    setNotes([...notes.filter((eachNote, idx) => idx != seletedId)]);\n  }; //saving notes to local storage\n\n\n  useEffect(() => {\n    const savedNotes = JSON.parse(localStorage.getItem(\"notes-data\"));\n\n    if (savedNotes) {\n      setNotes(savedNotes);\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"notes-data\", JSON.stringify(notes));\n  }, [notes]);\n\n  const getWidth = () => {\n    if (layoutRef.current) {\n      console.log(layoutRef === null || layoutRef === void 0 ? void 0 : layoutRef.current.clientWidth);\n      setWindowWidth(layoutRef === null || layoutRef === void 0 ? void 0 : layoutRef.current.clientWidth);\n    }\n  };\n\n  useEffect(() => {\n    // mount 단계\n    getWidth();\n    window.addEventListener(\"resize\", getWidth);\n    return () => {\n      //unmount단계에서 실행.\n      window.removeEventListener(\"resize\", getWidth);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"whole-note\",\n    id: \"whole-note\",\n    ref: layoutRef,\n    children: [(windowWidth <= 500 && visibleSidebar || windowWidth > 500) && /*#__PURE__*/_jsxDEV(Left, {\n      notes: notes,\n      addNewNote: addNewNote,\n      seletedId: seletedId,\n      setSeletedId: setSeletedId,\n      windowWidth: windowWidth,\n      setVisibleSidebar: setVisibleSidebar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this), (windowWidth <= 500 && !visibleSidebar || windowWidth > 500) && /*#__PURE__*/_jsxDEV(Right, {\n      deleteNote: deleteNote,\n      notes: notes,\n      setNotes: setNotes,\n      seletedId: seletedId,\n      getTimeAndDate: getTimeAndDate,\n      setVisibleSidebar: setVisibleSidebar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"fIKHlv2Arlfsu+KzgKcqegkYnX4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/haeunpark/Desktop/2022_06_Spring_16credit/CSE316/assignments316/assignment2/note-app/src/App.js"],"names":["React","useEffect","useRef","useState","Left","Right","Modal","App","notes","setNotes","textTitle","date","text","tags","seletedId","setSeletedId","windowWidth","setWindowWidth","visibleSidebar","setVisibleSidebar","layoutRef","addNewNote","newNote","getTimeAndDate","newNoteList","console","log","orderedDate","sort","a","b","Date","today","year","getFullYear","toString","month","getMonth","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","ampm","deleteNote","length","filter","eachNote","idx","savedNotes","JSON","parse","localStorage","getItem","setItem","stringify","getWidth","current","clientWidth","window","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { useState } from \"react\";\nimport Left from \"./components/Left\";\nimport Right from \"./components/Right\";\nimport Modal from \"./components/Modal\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([\n    {\n      textTitle: \"CSE 316\",\n      date: \"3/15/2022, 14:42:36 PM\",\n      text: \"CSE 316\",\n      tags: [],\n    },\n    {\n      textTitle: \"Another wrapping line example! This is another text\",\n      date: \"3/15/2022, 14:42:30 PM\",\n      text: \"Another wrapping line example! This is another text\",\n      tags: [],\n    },\n  ]);\n\n  const [seletedId, setSeletedId] = useState(-1);\n\n  const [windowWidth, setWindowWidth] = useState(0);\n\n  const [visibleSidebar, setVisibleSidebar] = useState(false);\n\n  const layoutRef = useRef(null);\n\n  //addNewNote\n  const addNewNote = (text) => {\n    const newNote = {\n      textTitle: \"New Note\",\n      date: getTimeAndDate(),\n      text: \"\",\n      tags: [],\n    };\n\n    const newNoteList = [newNote, ...notes];\n\n    setNotes(newNoteList);\n\n    setSeletedId(0);\n    console.log(newNoteList);\n\n    const orderedDate = date.sort(\n      (a, b) => new Date(a.date) - new Date(b.date)\n    );\n    console.log(\"orderedDate:\", orderedDate);\n  };\n\n  //getTimeAndDate\n  const getTimeAndDate = () => {\n    let today = new Date();\n\n    let year = today.getFullYear().toString();\n    let month = (today.getMonth() + 1).toString();\n    let date = today.getDate().toString();\n\n    let hours = today.getHours().toString() % 12 || 12;\n    let minutes = today.getMinutes().toString();\n    let seconds = today.getSeconds().toString();\n\n    let ampm = hours < 12 ? \"PM\" : \"AM\";\n\n    return (\n      month +\n      \"/\" +\n      date +\n      \"/\" +\n      year +\n      \", \" +\n      hours +\n      \":\" +\n      minutes +\n      \":\" +\n      seconds +\n      \" \" +\n      ampm\n    );\n  };\n\n  //deleteNote\n  const deleteNote = () => {\n    if (seletedId === notes.length - 1) {\n      setSeletedId(notes.length - 2);\n    }\n\n    setNotes([...notes.filter((eachNote, idx) => idx != seletedId)]);\n  };\n\n  //saving notes to local storage\n  useEffect(() => {\n    const savedNotes = JSON.parse(localStorage.getItem(\"notes-data\"));\n\n    if (savedNotes) {\n      setNotes(savedNotes);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"notes-data\", JSON.stringify(notes));\n  }, [notes]);\n\n  const getWidth = () => {\n    if (layoutRef.current) {\n      console.log(layoutRef?.current.clientWidth);\n      setWindowWidth(layoutRef?.current.clientWidth);\n    }\n  };\n\n  useEffect(() => {\n    // mount 단계\n    getWidth();\n    window.addEventListener(\"resize\", getWidth);\n    return () => {\n      //unmount단계에서 실행.\n      window.removeEventListener(\"resize\", getWidth);\n    };\n  }, []);\n\n  return (\n    <div className=\"whole-note\" id=\"whole-note\" ref={layoutRef}>\n      {((windowWidth <= 500 && visibleSidebar) || windowWidth > 500) && (\n        <Left\n          notes={notes}\n          addNewNote={addNewNote}\n          seletedId={seletedId}\n          setSeletedId={setSeletedId}\n          windowWidth={windowWidth}\n          setVisibleSidebar={setVisibleSidebar}\n        />\n      )}\n      {((windowWidth <= 500 && !visibleSidebar) || windowWidth > 500) && (\n        <Right\n          deleteNote={deleteNote}\n          notes={notes}\n          setNotes={setNotes}\n          seletedId={seletedId}\n          getTimeAndDate={getTimeAndDate}\n          setVisibleSidebar={setVisibleSidebar}\n        />\n      )}\n      <Modal />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
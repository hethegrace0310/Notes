{"ast":null,"code":"var _jsxFileName = \"/Users/haeunpark/Desktop/2022_06_Spring_16credit/CSE316/assignments/assignment2/note-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from \"react\";\nimport { useState } from \"react\";\nimport Left from \"./components/Left\";\nimport Right from \"./components/Right\";\nimport Modal from \"./components/Modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [notes, setNotes] = useState([{\n    textTitle: \"CSE 316\",\n    date: \"3/15/2022, 14:42:36 PM\",\n    text: \"CSE 316\" // id: nanoid()\n\n  }, {\n    textTitle: \"Another wrapping line example! This is another text\",\n    date: \"3/15/2022, 14:42:30 PM\",\n    text: \"Another wrapping line example! This is another text\" // id: nanoid()\n\n  }]);\n  const [seletedId, setSeletedId] = useState(-1); // const [visibleSidebar, setVisibleSidebar] = useState(false);\n  // const [windowWidth, setWindowWidth] = useState(0);\n  // const layoutRef = useRef(null);\n  //addNewNote\n\n  const addNewNote = text => {\n    const newNote = {\n      textTitle: \"New Note\",\n      date: getTimeAndDate(),\n      text: \"\"\n    };\n    const newNoteList = [newNote, ...notes];\n    setNotes(newNoteList);\n    setSeletedId(0);\n  }; //getTimeAndDate\n\n\n  const getTimeAndDate = () => {\n    let today = new Date();\n    let year = today.getFullYear().toString();\n    let month = (today.getMonth() + 1).toString();\n    let date = today.getDate().toString();\n    let hours = today.getHours().toString() % 12 || 12;\n    let minutes = today.getMinutes().toString();\n    let seconds = today.getSeconds().toString();\n    let ampm = hours < 12 ? \"PM\" : \"AM\";\n    return month + \"/\" + date + \"/\" + year + \", \" + hours + \":\" + minutes + \":\" + seconds + \" \" + ampm;\n  }; //deleteNote\n\n\n  const deleteNote = () => {\n    if (seletedId === notes.length - 1) {\n      setSeletedId(notes.length - 2);\n    } //  [ ...notes.filter((eachNote, idx)=>idx!=seletedId)]\n\n\n    setNotes([...notes.filter((eachNote, idx) => idx != seletedId)]);\n  }; //saving notes to local storage\n\n\n  useEffect(() => {\n    const savedNotes = JSON.parse(localStorage.getItem(\"notes-data\"));\n\n    if (savedNotes) {\n      setNotes(savedNotes);\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"notes-data\", JSON.stringify(notes));\n  }, [notes]); // const getWidth = () => {\n  //   const newWidth = layoutRef?.current.clientWidth;\n  //   if (newWidth) {\n  //     console.log(newWidth);\n  //     setWindowWidth(newWidth);\n  //   }\n  // };\n  // useEffect(() => {\n  //   // mount 단계\n  //   window.addEventListener(\"resize\", getWidth);\n  //   return () => {\n  //     //unmount단계에서 실행.\n  //     window.removeEventListener(\"resize\", getWidth);\n  //   };\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"whole-note\",\n    id: \"whole-note\",\n    children: [/*#__PURE__*/_jsxDEV(Left, {\n      notes: notes,\n      addNewNote: addNewNote,\n      seletedId: seletedId,\n      setSeletedId: setSeletedId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Right, {\n      deleteNote: deleteNote,\n      notes: notes,\n      setNotes: setNotes,\n      seletedId: seletedId,\n      getTimeAndDate: getTimeAndDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"ctrY75J42OI5+f2GjpU9NUnUXn4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/haeunpark/Desktop/2022_06_Spring_16credit/CSE316/assignments/assignment2/note-app/src/App.js"],"names":["React","useEffect","useRef","useState","Left","Right","Modal","App","notes","setNotes","textTitle","date","text","seletedId","setSeletedId","addNewNote","newNote","getTimeAndDate","newNoteList","today","Date","year","getFullYear","toString","month","getMonth","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","ampm","deleteNote","length","filter","eachNote","idx","savedNotes","JSON","parse","localStorage","getItem","setItem","stringify"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { useState } from \"react\";\nimport Left from \"./components/Left\";\nimport Right from \"./components/Right\";\nimport Modal from \"./components/Modal\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([\n    {\n      textTitle: \"CSE 316\",\n      date: \"3/15/2022, 14:42:36 PM\",\n      text: \"CSE 316\",\n      // id: nanoid()\n    },\n    {\n      textTitle: \"Another wrapping line example! This is another text\",\n      date: \"3/15/2022, 14:42:30 PM\",\n      text: \"Another wrapping line example! This is another text\",\n      // id: nanoid()\n    },\n  ]);\n\n  const [seletedId, setSeletedId] = useState(-1);\n\n  // const [visibleSidebar, setVisibleSidebar] = useState(false);\n\n  // const [windowWidth, setWindowWidth] = useState(0);\n  // const layoutRef = useRef(null);\n\n  //addNewNote\n  const addNewNote = (text) => {\n    const newNote = {\n      textTitle: \"New Note\",\n      date: getTimeAndDate(),\n      text: \"\",\n    };\n\n    const newNoteList = [newNote, ...notes];\n\n    setNotes(newNoteList);\n\n    setSeletedId(0);\n  };\n\n  //getTimeAndDate\n  const getTimeAndDate = () => {\n    let today = new Date();\n\n    let year = today.getFullYear().toString();\n    let month = (today.getMonth() + 1).toString();\n    let date = today.getDate().toString();\n\n    let hours = today.getHours().toString() % 12 || 12;\n    let minutes = today.getMinutes().toString();\n    let seconds = today.getSeconds().toString();\n\n    let ampm = hours < 12 ? \"PM\" : \"AM\";\n\n    return (\n      month +\n      \"/\" +\n      date +\n      \"/\" +\n      year +\n      \", \" +\n      hours +\n      \":\" +\n      minutes +\n      \":\" +\n      seconds +\n      \" \" +\n      ampm\n    );\n  };\n\n  //deleteNote\n  const deleteNote = () => {\n    if (seletedId === notes.length - 1) {\n      setSeletedId(notes.length - 2);\n    }\n\n    //  [ ...notes.filter((eachNote, idx)=>idx!=seletedId)]\n    setNotes([...notes.filter((eachNote, idx) => idx != seletedId)]);\n  };\n\n  //saving notes to local storage\n  useEffect(() => {\n    const savedNotes = JSON.parse(localStorage.getItem(\"notes-data\"));\n\n    if (savedNotes) {\n      setNotes(savedNotes);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"notes-data\", JSON.stringify(notes));\n  }, [notes]);\n\n  // const getWidth = () => {\n  //   const newWidth = layoutRef?.current.clientWidth;\n  //   if (newWidth) {\n  //     console.log(newWidth);\n  //     setWindowWidth(newWidth);\n  //   }\n  // };\n\n  // useEffect(() => {\n  //   // mount 단계\n  //   window.addEventListener(\"resize\", getWidth);\n\n  //   return () => {\n  //     //unmount단계에서 실행.\n  //     window.removeEventListener(\"resize\", getWidth);\n  //   };\n  // }, []);\n\n  return (\n    <div className=\"whole-note\" id=\"whole-note\">\n      <Left\n        notes={notes}\n        addNewNote={addNewNote}\n        seletedId={seletedId}\n        setSeletedId={setSeletedId}\n      />\n\n      <Right\n        deleteNote={deleteNote}\n        notes={notes}\n        setNotes={setNotes}\n        seletedId={seletedId}\n        getTimeAndDate={getTimeAndDate}\n      />\n      <Modal />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}